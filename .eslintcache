[{"C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\index.js":"1","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\App.js":"2","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\reportWebVitals.js":"3","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\redux\\store.js":"4","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\firebase\\firebase.js":"5","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\pages\\Login.js":"6","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\pages\\Register.js":"7","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\pages\\forgetPassword.js":"8","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\pages\\Home.js":"9","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\redux\\user\\userActions.js":"10","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\redux\\root-reducer.js":"11","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\firebase\\config.js":"12","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\redux\\user\\userReducer.js":"13","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\redux\\user\\userType.js":"14","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\auth\\validateRegister.js":"15","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\auth\\validateLogin.js":"16","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\auth\\useFormValidation.js":"17","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\containers\\MessagesContainer.js":"18","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\containers\\SideColorContainer.js":"19","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\containers\\SidePanelContainer.js":"20","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\containers\\MetaPanelContainer.js":"21","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\redux\\colors\\colorsReducer.js":"22","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\redux\\channel\\channelReducer.js":"23","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\components\\form\\index.js":"24","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\components\\gridContainer\\index.js":"25","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\redux\\channel\\channelActions.js":"26","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\containers\\ChannelsContainer.js":"27","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\containers\\DropDownContainer.js":"28","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\containers\\StartedContainer.js":"29","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\redux\\colors\\colorsActions.js":"30","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\containers\\UsersContainer.js":"31","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\redux\\colors\\colorsTypes.js":"32","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\redux\\channel\\channelType.js":"33","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\components\\sendMsg\\index.js":"34","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\components\\headerMsg\\index.js":"35","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\components\\messages\\index.js":"36","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\components\\progress\\index.js":"37","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\components\\sideColor\\index.js":"38","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\components\\sidePanel\\index.js":"39","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\components\\metaPanel\\index.js":"40","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\components\\form\\styles\\form.js":"41","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\components\\gridContainer\\styles\\gridContainer.js":"42","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\components\\channels\\index.js":"43","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\components\\dropDownUser\\index.js":"44","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\components\\started\\index.js":"45","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\components\\users\\index.js":"46","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\components\\sendMsg\\styles\\sendMsg.js":"47","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\components\\headerMsg\\styles\\headerMsg.js":"48","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\components\\progress\\styles\\progress.js":"49","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\components\\messages\\styles\\messages.js":"50","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\components\\sideColor\\styles\\sideColor.js":"51","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\components\\sidePanel\\styles\\sidePanel.js":"52","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\components\\metaPanel\\styles\\metaPanel.js":"53","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\components\\dropDownUser\\styles\\dropDownUser.js":"54","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\components\\channels\\styles\\channels.js":"55","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\components\\started\\styles\\started.js":"56","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\components\\users\\styles\\users.js":"57"},{"size":756,"mtime":1622932081379,"results":"58","hashOfConfig":"59"},{"size":1110,"mtime":1622932081354,"results":"60","hashOfConfig":"59"},{"size":375,"mtime":1622932081385,"results":"61","hashOfConfig":"59"},{"size":326,"mtime":1622932081383,"results":"62","hashOfConfig":"59"},{"size":1328,"mtime":1622932081378,"results":"63","hashOfConfig":"59"},{"size":2063,"mtime":1622932081380,"results":"64","hashOfConfig":"59"},{"size":2698,"mtime":1622932081380,"results":"65","hashOfConfig":"59"},{"size":1246,"mtime":1622932081380,"results":"66","hashOfConfig":"59"},{"size":1431,"mtime":1622933819224,"results":"67","hashOfConfig":"59"},{"size":151,"mtime":1622932081384,"results":"68","hashOfConfig":"59"},{"size":354,"mtime":1622932081383,"results":"69","hashOfConfig":"59"},{"size":461,"mtime":1626545229801,"results":"70","hashOfConfig":"59"},{"size":380,"mtime":1622932081384,"results":"71","hashOfConfig":"59"},{"size":49,"mtime":1622932081384,"results":"72","hashOfConfig":"59"},{"size":802,"mtime":1622932081357,"results":"73","hashOfConfig":"59"},{"size":485,"mtime":1622932081356,"results":"74","hashOfConfig":"59"},{"size":1171,"mtime":1622932081356,"results":"75","hashOfConfig":"59"},{"size":13980,"mtime":1622932081375,"results":"76","hashOfConfig":"59"},{"size":2137,"mtime":1622932081376,"results":"77","hashOfConfig":"59"},{"size":957,"mtime":1622934094008,"results":"78","hashOfConfig":"59"},{"size":889,"mtime":1622933517089,"results":"79","hashOfConfig":"59"},{"size":468,"mtime":1622932081382,"results":"80","hashOfConfig":"59"},{"size":748,"mtime":1622932081381,"results":"81","hashOfConfig":"59"},{"size":1229,"mtime":1622932081360,"results":"82","hashOfConfig":"59"},{"size":563,"mtime":1622932081362,"results":"83","hashOfConfig":"59"},{"size":499,"mtime":1622932081381,"results":"84","hashOfConfig":"59"},{"size":5013,"mtime":1622934679949,"results":"85","hashOfConfig":"59"},{"size":4459,"mtime":1622932081374,"results":"86","hashOfConfig":"59"},{"size":1840,"mtime":1622935636258,"results":"87","hashOfConfig":"59"},{"size":210,"mtime":1622932081382,"results":"88","hashOfConfig":"59"},{"size":3212,"mtime":1622934505596,"results":"89","hashOfConfig":"59"},{"size":39,"mtime":1622932081383,"results":"90","hashOfConfig":"59"},{"size":161,"mtime":1622932081382,"results":"91","hashOfConfig":"59"},{"size":444,"mtime":1622932081368,"results":"92","hashOfConfig":"59"},{"size":899,"mtime":1622932081363,"results":"93","hashOfConfig":"59"},{"size":1285,"mtime":1622932081364,"results":"94","hashOfConfig":"59"},{"size":258,"mtime":1622932081367,"results":"95","hashOfConfig":"59"},{"size":1197,"mtime":1622932081369,"results":"96","hashOfConfig":"59"},{"size":587,"mtime":1622932081370,"results":"97","hashOfConfig":"59"},{"size":1611,"mtime":1622932081365,"results":"98","hashOfConfig":"59"},{"size":1691,"mtime":1622932081361,"results":"99","hashOfConfig":"59"},{"size":511,"mtime":1622932081362,"results":"100","hashOfConfig":"59"},{"size":1241,"mtime":1622932081358,"results":"101","hashOfConfig":"59"},{"size":1472,"mtime":1622932081359,"results":"102","hashOfConfig":"59"},{"size":615,"mtime":1622932081371,"results":"103","hashOfConfig":"59"},{"size":655,"mtime":1622932081372,"results":"104","hashOfConfig":"59"},{"size":552,"mtime":1622932081368,"results":"105","hashOfConfig":"59"},{"size":964,"mtime":1622932081364,"results":"106","hashOfConfig":"59"},{"size":307,"mtime":1622932081367,"results":"107","hashOfConfig":"59"},{"size":1830,"mtime":1622932081365,"results":"108","hashOfConfig":"59"},{"size":1293,"mtime":1622932081369,"results":"109","hashOfConfig":"59"},{"size":335,"mtime":1622932081371,"results":"110","hashOfConfig":"59"},{"size":1240,"mtime":1622932081366,"results":"111","hashOfConfig":"59"},{"size":1428,"mtime":1622932081359,"results":"112","hashOfConfig":"59"},{"size":1314,"mtime":1622932081358,"results":"113","hashOfConfig":"59"},{"size":519,"mtime":1622932081372,"results":"114","hashOfConfig":"59"},{"size":756,"mtime":1622932081373,"results":"115","hashOfConfig":"59"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},"1kb93to",{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"118"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"118"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"118"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"118"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"118"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"118"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"118"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"118"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"118"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"240"},"C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\index.js",[],["241","242"],"C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\App.js",["243"],"import React, { useEffect } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { Route, Switch, withRouter } from 'react-router-dom';\r\nimport firebase from './firebase/firebase';\r\nimport Login from './pages/Login';\r\nimport Register from './pages/Register';\r\nimport ForgetPassword from './pages/forgetPassword';\r\nimport {setCurrentUser} from './redux/user/userActions'\r\nimport Home from './pages/Home';\r\n\r\nfunction App({setCurrentUser,history}) {\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = firebase.auth.onAuthStateChanged((user)=>{\r\n      \r\n        if(user){\r\n          setCurrentUser(user)\r\n        }else{\r\n          setCurrentUser(null)\r\n          history.push('/login')\r\n        }\r\n\r\n    })\r\n    return () => unsubscribe()\r\n}, [])\r\n\r\n  return (\r\n    <>\r\n      <Switch>\r\n        <Route exact path='/' render={()=><Home/>}/>\r\n        <Route path='/login' component={Login}/>\r\n        <Route path='/register' component={Register}/>\r\n        <Route path='/forget' component={ForgetPassword}/>\r\n      </Switch>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default connect(null,{setCurrentUser})(withRouter(App));\r\n","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\reportWebVitals.js",[],"C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\redux\\store.js",[],"C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\firebase\\firebase.js",[],"C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\pages\\Login.js",[],"C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\pages\\Register.js",[],"C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\pages\\forgetPassword.js",[],"C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\pages\\Home.js",[],"C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\redux\\user\\userActions.js",[],"C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\redux\\root-reducer.js",[],"C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\firebase\\config.js",[],"C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\redux\\user\\userReducer.js",[],"C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\redux\\user\\userType.js",[],"C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\auth\\validateRegister.js",[],"C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\auth\\validateLogin.js",[],"C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\auth\\useFormValidation.js",[],"C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\containers\\MessagesContainer.js",["244","245","246","247","248","249"],"import React, { useEffect, useState } from 'react'\r\n//import { connect } from 'react-redux'\r\nimport HeaderMsg from '../components/headerMsg'\r\nimport Messages from '../components/messages'\r\nimport SendMsg from '../components/sendMsg'\r\nimport firebase from '../firebase/firebase'\r\nimport mime from 'mime-types'\r\nimport {v4 as uuidv4} from 'uuid'   \r\nimport Progress from '../components/progress'\r\nimport { connect } from 'react-redux'\r\nimport {setUserPosts} from '../redux/channel/channelActions'\r\nimport 'emoji-mart/css/emoji-mart.css'\r\nimport {Picker,emojiIndex} from 'emoji-mart'\r\nfunction MessagesContainer({user,currentChannel,privateChannel,setUserPosts}) {\r\n    const messageRef=firebase.db.ref('messages')\r\n    const usersRef = firebase.db.ref('users')\r\n    let msgEnd; //hada ref kina fi document dial react raha saaahla \r\n    const messagePrivateRef = firebase.db.ref('privateMessages')\r\n    const typingRef = firebase.db.ref('typing')\r\n    //hadi bach kanchofo wach had l user baki mconnecter ola tket3at lih connection \r\n    const connectedRef = firebase.db.ref(\".info/connected\");\r\n    \r\n    let storageRef = firebase.storage.ref()  // hna kanekhdem bi storage li 3andi fi firebase hna bhala kandir wahed ref jdid\r\n    //msg header\r\n    const [search, setSearch] = useState('')\r\n    const [isStarted , setIsStarted] = useState(false)\r\n    const [resultSearch, setResultSearch] = useState([])\r\n    //messages\r\n    const [message, setMessage] = useState('')\r\n    const [messages, setMessages] = useState([])\r\n    //appload file\r\n    const [file, setFile] = useState('')\r\n    const [model, setModel] = useState(false)\r\n    const [aploadState, setAploadState] = useState('')     //aploadState radi nehtajouha fi progress\r\n    const [percent, setPercent] = useState(0)\r\n    //hadi dial typing users\r\n    const [typingUsers, setTypingUsers] = useState([])\r\n    //hadi dial emoji\r\n    const [emojiPicker, setEmojiPicker] = useState(false)\r\n\r\n    const autorized =['image/jpeg','image/png']\r\n\r\n    function refMessages(){\r\n        return privateChannel ? messagePrivateRef : messageRef\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        let loadedMsg =[]\r\n        if(user && currentChannel){\r\n            setMessages([])\r\n            refMessages().child(currentChannel.id).on('child_added',snap=>{\r\n                loadedMsg.push(snap.val())\r\n                setMessages([...loadedMsg])\r\n                setAploadState('done')  //ila kan child added image kandiro done bach nhaydo hadak progresse bare\r\n            })\r\n        //start channels => hadi dawr dialha wa howa une fai katzad chihaja fi started li fi user katbeddel hadik isstarted men true li false or l3aks\r\n        //dernaha hna hit 3andha 3alaka bi luser kina 3andi fi dependecies\r\n        usersRef.child(`${user?.uid}/started`).once('value').then((data)=>{ //once bhal on finma kitra chi update wahed kikhdem\r\n            if(data.val() !== null){\r\n                const channelsId = Object.keys(data.val()) //hadi katrejje3 les key li kaynin fi object started fi array\r\n                const prevStart = channelsId.includes(currentChannel.id)\r\n                setIsStarted(prevStart)\r\n            }\r\n        })\r\n            return ()=>{\r\n                refMessages().child(currentChannel.id).off()\r\n                usersRef.child(`${user?.uid}/started`).off()\r\n            }\r\n        }\r\n\r\n    }, [user,currentChannel])\r\n    //hadi dial count msg user\r\n    useEffect(() => {\r\n        //count user messages\r\n        countUserMessage(messages)\r\n    }, [messages])\r\n\r\n    function countUserMessage(messages){\r\n            const usermessages= messages.reduce((acc,msg)=>{\r\n                if(msg.createdBy.name in acc ){\r\n                    acc[msg.createdBy.name].count += 1 \r\n                }else{\r\n                    acc[msg.createdBy.name]={\r\n                        avatar:msg.createdBy.avatar,\r\n                        count:1\r\n                    }\r\n                }\r\n                return acc\r\n            },{})\r\n            setUserPosts(usermessages)\r\n    }\r\n\r\n    function searchChange(event){\r\n        setSearch(event.target.value)\r\n    }\r\n\r\n    useEffect(() => {\r\n        const msgs = [...messages]\r\n        const regex = new RegExp(search,'gi')//hna derna match bach nkhadem regexp bach tchercher fi arr soi kanet kelma kbira aw sghira\r\n        const resultSearch = msgs.reduce((acc,msg)=>{\r\n            if((msg.content && msg.content.match(regex)) || msg.createdBy.name.match(regex)){ \r\n                acc.push(msg)\r\n            }\r\n            return acc\r\n        },[])\r\n        setResultSearch(resultSearch)\r\n    }, [search])\r\n\r\n\r\n\r\n\r\n    function msgChange(event){\r\n        setMessage(event.target.value)\r\n    }\r\n    \r\n    function sendHandler(){\r\n        if(message){\r\n            refMessages().child(currentChannel.id).push().set(createMessage())\r\n            .then(()=>{\r\n                setMessage('')\r\n                typingRef.child(currentChannel.id).child(user.uid).remove()\r\n                setEmojiPicker(false)\r\n            })\r\n        }\r\n    }\r\n\r\n    function createMessage(url=null){\r\n        const newMessage ={\r\n            time:firebase.time, //hadik time jebtha men firebase\r\n            createdBy:{\r\n                id:user.uid,\r\n                name:user.displayName,\r\n                avatar:user.photoURL\r\n            }, \r\n        }\r\n        if(url){\r\n            newMessage['image']= url  //ila kan url 3amer idan kanzid wahed key jdid smito image okane3tih url\r\n        }else{\r\n            newMessage['content']= message //hna ila makanch url kanzid fi new msg content okane3tiha msg\r\n        }\r\n        return newMessage\r\n    }\r\n\r\n    function sendFile(){ //hadik mime kaninstalih pakcage dialha okane3tiha smit lfile bi l extenssion dialo ohowa kihawelha matalan image/png\r\n        if(file !== null){\r\n            if(autorized.includes(mime.lookup(file.file.name))){ //mime.lookup katcheker 3la men be3d nokta chno l extenssion\r\n                let metaData={contentType:mime.lookup(file.file.name)} //had metadata zedtha hit object file brit nzid fih contentType:image/png matalan \r\n                aploadFile(file.file,metaData)\r\n                setFile('')\r\n                setModel(false)\r\n            }\r\n        }\r\n    }\r\n    \r\n    function aploadFile(file,metaData){ //had apload kandir biha hadak progress kibda men 0 htel 100 %\r\n        const channelId = currentChannel.id\r\n        const filePath = privateChannel ? `chat/private/${channelId}/${uuidv4()}.jpg` : `chat/public/${uuidv4()}.jpg` //uuidv4 hada pakcage smito uuid kainstalih okigenere lia wahed key\r\n        setAploadState('Aploading') // hna kane3ti wahed lkima aploading bach apres radi netcheker biha\r\n        storageRef = storageRef.child(filePath).put(file,metaData) //hna kanhot fi storage filepath ofi detail dial image kandir put (hna kikoun detail dial img)\r\n        storageRef.on('state_change', snap=>{  //ohna kandir wahed listner 3la storage bach nebda n3amed fi progress\r\n            const percentLoad = Math.round((snap.bytesTransferred/snap.totalBytes)*100) //bytesTransferred fach katcharga lfoto o hna bechhal kibda hta kiwsal 100 obach ndiro bi nisba lmi2awiya kankessmo 3la totale medroub fi 100\r\n            setPercent(percentLoad)\r\n            storageRef.snapshot.ref.getDownloadURL().then(urlImage=>{ // derna snapshot bach nakhdo reference dial refStorage\r\n            sendFileMsg(urlImage,refMessages(),channelId)\r\n        })\r\n        })\r\n    }\r\n    \r\n    function sendFileMsg(url,messageRef,channelId){\r\n        messageRef.child(channelId).push().set(createMessage(url)) //hna kanzidha fi database realtime bi nefs lmethod creatMessage\r\n    }\r\n//hna file katrejje3 lia object fih file owast file detail dial object\r\n    function changeFile(event){\r\n        const file = event.target.files[0]\r\n        if(file){\r\n            setFile({file})\r\n        }\r\n    }\r\n    function startChannelHandler(){\r\n        setIsStarted(prevState=>!prevState)\r\n    }\r\n    useEffect(() => {\r\n        if(user){\r\n        if(isStarted ){\r\n            usersRef.child(`${user.uid}/started`).update({\r\n                [currentChannel.id] : {\r\n                    name:currentChannel.name,\r\n                    description:currentChannel.description,\r\n                    createdBy:{\r\n                        name:user.displayName,\r\n                        avatar:user.photoURL\r\n                    }\r\n                }\r\n            }) \r\n        }else{\r\n            usersRef.child(`${user.uid}/started/${currentChannel?.id}`).remove(()=>console.log('remove channel started'))\r\n        }\r\n        }\r\n\r\n    }, [isStarted,user]) \r\n\r\n    //had useeffect dial div li fih msgEnd\r\n    useEffect(() => {\r\n        if(msgEnd){\r\n            msgEnd.scrollIntoView({behavior:'smooth'})\r\n        }\r\n    }, [messages])\r\n\r\n    //hadi meni kibda chi user ikteb kiban lik rah chihad kikteb\r\n    function handelKeyDown(event){\r\n        if(event.keyCode === 13){\r\n            sendHandler()\r\n        }\r\n        if(message && message!==''){\r\n            typingRef.child(currentChannel.id).child(user.uid).set(user.displayName)\r\n        }else{\r\n            typingRef.child(currentChannel.id).child(user.uid).remove()\r\n        }\r\n    }\r\n    // had useefffect dial typing user\r\n    useEffect(() => {\r\n        let typings = []\r\n        if(user && currentChannel){\r\n            typingRef.child(currentChannel.id).on('child_added',snap=>{\r\n                if(snap.key !== user.uid){\r\n                    typings.push({\r\n                        id:snap.key,\r\n                        name:snap.val()\r\n                    })\r\n                    setTypingUsers([...typings])\r\n                }\r\n            })\r\n            typingRef.child(currentChannel.id).on('child_removed',snap=>{\r\n                setTypingUsers(typingUsers.filter(typeUser=>typeUser.id !== snap.key))  // reje3 kolchi men ghir snap.key li temsah\r\n            })\r\n            connectedRef.on(\"value\", (snap)=> {\r\n                if (snap.val() === true) {\r\n                    typingRef.child(currentChannel.id)\r\n                            .child(user.uid)\r\n                            .onDisconnect()\r\n                            .remove(err=>console.log(err)) //had ondisconnect() hna kikra had event dial disconnect okinefdo meni kansed chrome awla kandir diconnect \r\n                } \r\n            })\r\n            return()=>{\r\n                typingRef.child(currentChannel.id).off()\r\n                connectedRef.off()\r\n            }\r\n        }\r\n\r\n    }, [user,currentChannel])\r\n\r\n    function displayTypingUsers(){\r\n        return typingUsers.length ?  typingUsers.map(user=>(\r\n            <p key={user.id}>{user.name} is typing ....</p>\r\n        )):null\r\n    }\r\n\r\n    function addEmoji(){\r\n        setEmojiPicker(prevState=>!prevState)\r\n    }\r\n\r\n    function selectEmoji(emoji){\r\n        const newMessage = colonToUniCode(`${message} ${emoji.colons}`)\r\n        setMessage(newMessage)\r\n        setEmojiPicker(false)\r\n    }\r\n    //hadi function ghir diri liha copier coller machi darori tfahmiha\r\n    function colonToUniCode(message){\r\n        return message.replace(/:[A-Za-z0-9_+-]+:/g,x=>{\r\n            x=x.replace(/:/g, \"\");\r\n            let emoji=emojiIndex.emojis[x];\r\n            if(typeof emoji !=='undefined'){\r\n                let unicode=emoji.native;\r\n                if(typeof unicode !=='undefined'){\r\n                    return unicode;\r\n                }\r\n            }\r\n            x=':'+x+':';\r\n            return x;\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div style={{width:'70%'}}>\r\n        <HeaderMsg channel={currentChannel?.name} messages={messages} \r\n                        privateChannel={privateChannel} startChannel={startChannelHandler} started={isStarted}>\r\n            <HeaderMsg.Search \r\n            type='text'\r\n            onChange={searchChange}\r\n            value={search}\r\n            placeHolder='Search'\r\n            />\r\n        </HeaderMsg>\r\n        <Messages>\r\n            {messages.length>0 ? resultSearch.length>0 && search ? \r\n            resultSearch.map(msg=>{\r\n                return <Messages.Message key={msg.time} msg={msg} selfUser={user?.uid === msg?.createdBy.id}/>\r\n            })\r\n            : messages.map(msg=>{\r\n                return <Messages.Message key={msg.time} msg={msg} selfUser={user?.uid === msg?.createdBy.id}/>\r\n            }):''}\r\n            { model && <Messages.Model closeModel={()=>setModel(false)} addFile={sendFile}>\r\n                <Messages.File type='file'\r\n                                value={file.name}\r\n                                onChange={changeFile}\r\n                />\r\n            </Messages.Model>}\r\n            <div ref={node=>msgEnd=node}>\r\n                    {displayTypingUsers()} \r\n            </div>\r\n        </Messages>\r\n        <SendMsg>\r\n            <span onClick={addEmoji} style={{position:'relative',cursor:'pointer',fontSize:'20px',fontWeight:'bold'}}>+\r\n            { emojiPicker && <Picker \r\n                        set='apple'\r\n                        emoji='point_up'\r\n                        title='Pick your emoji…'\r\n                        onSelect={selectEmoji}\r\n                        style={{ position: 'absolute', bottom: '20px', left: '20px' }}\r\n                        />}\r\n            </span>\r\n            <SendMsg.Input\r\n                type='text'\r\n                onChange={msgChange}\r\n                value={message}\r\n                placeHolder='Your message'\r\n                onKeyDown={handelKeyDown}\r\n                />\r\n            <SendMsg.Button color='green' onClick={sendHandler}>Send message</SendMsg.Button>\r\n            <SendMsg.Button color='orange' onClick={()=>setModel(true)}>Apload file</SendMsg.Button>\r\n            {aploadState === 'Aploading' && <Progress percent={percent}/>} \r\n        </SendMsg>\r\n        </div>\r\n    )\r\n}\r\nconst mapStateToProps = ({channel})=>(\r\n    {\r\n        privateChannel:channel.privateChannel\r\n    }\r\n)\r\nexport default connect(mapStateToProps,{setUserPosts})(MessagesContainer)\r\n","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\containers\\SideColorContainer.js",["250"],"import React,{useEffect, useState} from 'react'\r\nimport { connect } from 'react-redux'\r\nimport SideColor from '../components/sideColor'\r\nimport firebase from '../firebase/firebase'\r\nimport { setColorRedux } from '../redux/colors/colorsActions'\r\n\r\nfunction SideColorContainer({user,setColorRedux}) {\r\n    const [open, setOpen] = useState(false)\r\n    const [primaryColor, setPrimaryColor] = useState('')\r\n    const [secondaryColor, setSecondaryColor] = useState('')\r\n    const [colors, setColors] = useState([])\r\n\r\n    const usersRef=firebase.db.ref('users')\r\n\r\n    useEffect(() => {\r\n        let listColors=[]\r\n        if(user){\r\n            usersRef.child(`${user.uid}/colors`)\r\n                .on('child_added',snap=>{\r\n                    listColors.unshift(snap.val())\r\n                    setColors([...listColors])\r\n                })\r\n        }\r\n    }, [user])\r\n\r\n\r\n    function handlerPrimaryColor(color){\r\n        setPrimaryColor(color.hex)\r\n    }\r\n\r\n    function handlerSecondaryColor(color){\r\n        setSecondaryColor(color.hex)\r\n    }\r\n    function addColorsHandler(){\r\n        usersRef.child(`${user.uid}/colors`)\r\n                .push()\r\n                .set({\r\n                    primaryColor,\r\n                    secondaryColor\r\n                })\r\n                .then(()=>{\r\n                    setOpen(false)\r\n                })\r\n    }\r\n    return (\r\n        <SideColor >\r\n            <SideColor.Add onClick={()=>setOpen(true)}/>\r\n            {open && <SideColor.Model closeModel={()=>setOpen(false)}\r\n            handlerPrimaryColor={handlerPrimaryColor}\r\n            primaryColor={primaryColor}\r\n            handlerSecondaryColor={handlerSecondaryColor}\r\n            secondaryColor={secondaryColor}\r\n            addColors={addColorsHandler}\r\n            />}\r\n            {colors.length>0 && colors.map((color,i)=>(\r\n                <SideColor.Color key={i} color={color}\r\n                                onClick={()=>setColorRedux(color.primaryColor,color.secondaryColor)}\r\n                />\r\n            ))}\r\n        </SideColor>\r\n    )\r\n}\r\n\r\nexport default connect(null,{setColorRedux})(SideColorContainer)\r\n","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\containers\\SidePanelContainer.js",[],"C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\containers\\MetaPanelContainer.js",["251","252"],"import React, { useState } from \"react\";\r\nimport MetaPanel from \"../components/metaPanel\";\r\n\r\nfunction MetaPanelContainer({\r\n  user,\r\n  currentChannel,\r\n  privateChannel,\r\n  userPosts,\r\n}) {\r\n  const [active, setActive] = useState(0);\r\n\r\n  function clickHandler(activeItem) {\r\n    const activeIndex = activeItem === active ? 0 : activeItem;\r\n    setActive(activeIndex);\r\n  }\r\n  function displayPosts() {\r\n    return Object.entries(userPosts).sort((a, b) => b[1].count - a[1].count);\r\n  }\r\n  return (\r\n    !privateChannel &&\r\n    currentChannel && (\r\n      <MetaPanel>\r\n        <MetaPanel.Title> # {currentChannel.name}</MetaPanel.Title>\r\n        <MetaPanel.Accordian\r\n          clicked={clickHandler}\r\n          active={active}\r\n          channel={currentChannel}\r\n          userPosts={displayPosts()}\r\n        />\r\n      </MetaPanel>\r\n    )\r\n  );\r\n}\r\n\r\nexport default MetaPanelContainer;\r\n","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\redux\\colors\\colorsReducer.js",[],"C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\redux\\channel\\channelReducer.js",[],"C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\components\\form\\index.js",[],"C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\components\\gridContainer\\index.js",[],"C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\redux\\channel\\channelActions.js",[],"C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\containers\\ChannelsContainer.js",["253"],"import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Channels from \"../components/channels\";\r\nimport firebase from \"../firebase/firebase\";\r\nimport {\r\n  setCurrentChannel,\r\n  isPrivateChannel,\r\n} from \"../redux/channel/channelActions\";\r\n\r\nfunction ChannelsContainer({\r\n  user,\r\n  currentChannel,\r\n  setCurrentChannel,\r\n  isPrivateChannel,\r\n}) {\r\n  const [name, setName] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [model, setModel] = useState(false);\r\n  const [channels, setChannels] = useState([]);\r\n  const [firstLoad, setFirstLoad] = useState(true);\r\n  //notification\r\n  const [channel, setChannel] = useState(null);\r\n  const [notifications, setNotifications] = useState([]);\r\n\r\n  const messageRef = firebase.db.ref(\"messages\");\r\n  const channelRef = firebase.db.ref(\"channels\");\r\n  const typingRef = firebase.db.ref(\"typing\");\r\n\r\n  useEffect(() => {\r\n    const loadedChannel = [];\r\n\r\n    channelRef.on(\"child_added\", (snap) => {\r\n      loadedChannel.push(snap.val());\r\n      setChannels([...loadedChannel]);\r\n      setCurrentChannel(loadedChannel[0]);\r\n      firstChannel(loadedChannel[0]);\r\n      //notification\r\n      addNotifications(snap.key);\r\n    });\r\n\r\n    return () => {\r\n      channelRef.off();\r\n      messageRef.off();\r\n    };\r\n  }, []);\r\n\r\n  function addNotifications(channelId) {\r\n    messageRef.child(channelId).on(\"value\", (snap) => {\r\n      let lastTotal = 0;\r\n      let index = notifications.findIndex(\r\n        (notific) => notific.id === channelId\r\n      );\r\n      if (index !== -1) {\r\n        if (channelId !== channel?.id) {\r\n          lastTotal = notifications[index].total;\r\n          if (snap.numChildren() - lastTotal > 0) {\r\n            notifications[index].count = snap.numChildren() - lastTotal;\r\n          }\r\n        }\r\n        notifications[index].lastKnowTotal = snap.numChildren();\r\n      } else {\r\n        notifications.push({\r\n          id: channelId,\r\n          total: snap.numChildren(),\r\n          lastKnowTotal: snap.numChildren(),\r\n          count: 0,\r\n        });\r\n      }\r\n    });\r\n    setNotifications(notifications);\r\n  }\r\n\r\n  function firstChannel(channel) {\r\n    if (firstLoad && channel.length > 0) {\r\n      setCurrentChannel(channel);\r\n      setFirstLoad(false);\r\n      setChannel(channel);\r\n    }\r\n  }\r\n\r\n  function addChannel() {\r\n    if (name && description && user) {\r\n      const key = channelRef.push().key;\r\n      const newChannel = {\r\n        id: key,\r\n        name: name,\r\n        description: description,\r\n        createdBy: {\r\n          id: user.uid,\r\n          userName: user.displayName,\r\n          avatar: user.photoURL,\r\n        },\r\n      };\r\n      channelRef\r\n        .child(key)\r\n        .update(newChannel)\r\n        .then(() => {\r\n          setName(\"\");\r\n          setDescription(\"\");\r\n          closeModel();\r\n        });\r\n    }\r\n  }\r\n  function closeModel() {\r\n    setModel(false);\r\n  }\r\n\r\n  function changeChannel(channel) {\r\n    setCurrentChannel(channel);\r\n    typingRef.child(currentChannel.id).child(user.uid).remove();\r\n    isPrivateChannel(false);\r\n    setChannel(channel);\r\n    clearNotifications();\r\n  }\r\n\r\n  function clearNotifications() {\r\n    let index = notifications.findIndex(\r\n      (notific) => notific.id === channel?.id\r\n    );\r\n    if (index !== -1) {\r\n      let updateNotifications = [...notifications];\r\n      updateNotifications[index].total = notifications[index].lastTotal;\r\n      updateNotifications[index].count = 0;\r\n      setNotifications(updateNotifications);\r\n    }\r\n  }\r\n  function countNotification(channel) {\r\n    let count = 0;\r\n    notifications.forEach((notific) => {\r\n      if (notific.id === channel.id) {\r\n        count = notific.count;\r\n      }\r\n    });\r\n    if (count > 0) return count;\r\n  }\r\n\r\n  return (\r\n    <Channels>\r\n      <Channels.Header\r\n        openModel={() => setModel(true)}\r\n        countChannels={channels.length}\r\n      />\r\n      {channels.length > 0\r\n        ? channels.map((channel) => {\r\n            return (\r\n              <Channels.Channel\r\n                key={channel.id}\r\n                channelName={channel.name}\r\n                onClick={() => changeChannel(channel)}\r\n                active={channel.id === currentChannel?.id}\r\n              >\r\n                {countNotification(channel)}\r\n              </Channels.Channel>\r\n            );\r\n          })\r\n        : \" \"}\r\n\r\n      {model && (\r\n        <Channels.Model closeModel={closeModel} addChannel={addChannel}>\r\n          <Channels.Input\r\n            placeholder=\"Channel name\"\r\n            value={name}\r\n            onChange={(event) => setName(event.target.value)}\r\n          />\r\n          <Channels.Input\r\n            placeholder=\"Channel description\"\r\n            value={description}\r\n            onChange={(event) => setDescription(event.target.value)}\r\n          />\r\n        </Channels.Model>\r\n      )}\r\n    </Channels>\r\n  );\r\n}\r\n\r\nexport default connect(null, { setCurrentChannel, isPrivateChannel })(\r\n  ChannelsContainer\r\n);\r\n","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\containers\\DropDownContainer.js",["254","255"],"import React, { useEffect, useState } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport DropDownUser from '../components/dropDownUser'\r\nimport AvatarEditor from 'react-avatar-editor'\r\nimport firebase from '../firebase/firebase';\r\n\r\nfunction DropDownContainer({user}) {\r\n\r\n    let avatarEditor;\r\n\r\n    const [open, setOpen] = useState(false)\r\n    const [openModel, setOpenModel] = useState(false)\r\n    const [fileAavatr, setFileAvatar] = useState('')\r\n    const [blob, setBlob] = useState('') \r\n    const [crapedImg, setCrapedImg] = useState('') // hia l image li kankat3o bilcanvace\r\n    const [imageAvatarUrl, setImageAvatarUrl] = useState('')\r\n\r\n    const storageRef = firebase.storage.ref()\r\n    const userRef = firebase.auth.currentUser\r\n    const usersRef = firebase.db.ref('users')\r\n\r\n    function OpenAvatarHandler(){\r\n        setOpenModel(true)\r\n    }\r\n\r\n    function fileChangeHandler(event){\r\n        let file = event.target.files[0] // target dial files kate3tini array fiha fils kamlin ohna kanjibo lowla\r\n        const reader = new FileReader() //hadi wahed class kante \r\n        if(file){ // chofi doc dial FileReader fi google\r\n            reader.readAsDataURL(file) // hna\r\n            reader.addEventListener('load',()=>{ \r\n                setFileAvatar(reader.result) \r\n            })\r\n        }\r\n    }\r\n\r\n    function previewImgHandler(){\r\n        if(avatarEditor){ //hadi ref dial avatarEditor lcomponent\r\n            avatarEditor.getImageScaledToCanvas() //hadchi 3ando 3alaka bi lconvace bla matsad3i rassek m3ah \r\n                        .toBlob((blob)=>{ \r\n                            let imgURL = URL.createObjectURL(blob)\r\n                            setCrapedImg(imgURL) // hadchi ki3tini url dial image li ana katte3t bil convace\r\n                            setBlob(blob) // had blob kikoun fih maaloumat 3la limage size o type \r\n                        })\r\n        }\r\n    }\r\n    \r\n    function saveAvatarHandler(){\r\n        let metaData={\r\n            contentType:'image/jpeg',\r\n        }\r\n        storageRef.child(`avatars/users/${user.uid}`).put(blob,metaData).then((snap)=>{ //put hia bach kanhotto les files fi storage\r\n            snap.ref.getDownloadURL().then((imgUrl)=>{ // kate3ti url dial image li fi storage\r\n                setImageAvatarUrl(imgUrl)\r\n            })\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(imageAvatarUrl){\r\n            userRef.updateProfile({\r\n                photoURL:imageAvatarUrl\r\n            }).then(()=>{\r\n                setFileAvatar('')\r\n                setBlob('')\r\n                setCrapedImg('')\r\n                setOpenModel(false)\r\n            })\r\n            usersRef.child(user.uid).update({\r\n                avatar:imageAvatarUrl\r\n            })\r\n        }\r\n    }, [imageAvatarUrl])\r\n\r\n    return (\r\n        <DropDownUser>\r\n            <DropDownUser.User \r\n                photoUrl={user?.photoURL}\r\n                displayName={user?.displayName} \r\n                open={open} \r\n                onClick={()=>setOpen(prevState=>!prevState)}/>\r\n            {open && <DropDownUser.Drop displayName={user?.displayName} ChangeAvatar={OpenAvatarHandler}/>}\r\n            {openModel && <DropDownUser.Model closeModel={()=>setOpenModel(false)} previewImg={previewImgHandler} \r\n                                                showSaveAvatar={!!crapedImg} saveAvatar={saveAvatarHandler}> \r\n                    <DropDownUser.File type='file'\r\n                        value={fileAavatr.name}\r\n                        onChange={fileChangeHandler}\r\n                    />\r\n                        {fileAavatr && <AvatarEditor //hada component kaninstalih okandir lih import\r\n                            image={fileAavatr}\r\n                            width={80}\r\n                            height={80}\r\n                            border={50}\r\n                            color={[0, 0, 0, 0.6]} // RGBA\r\n                            scale={1.2}\r\n                            rotate={0}\r\n                            style={{margin:'15px'}}\r\n                            ref={node=>avatarEditor = node}\r\n                    />}\r\n                    { crapedImg && <img src={crapedImg} style={{margin:'15px', width:'100px',height:'100px'}}/>}\r\n                </DropDownUser.Model>}\r\n        </DropDownUser>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = ({user})=>{\r\n    return {\r\n        user:user.currentUser\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(DropDownContainer)\r\n","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\containers\\StartedContainer.js",["256"],"import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Started from \"../components/started\";\r\nimport firebase from \"../firebase/firebase\";\r\nimport {\r\n  setCurrentChannel,\r\n  isPrivateChannel,\r\n} from \"../redux/channel/channelActions\";\r\n\r\nfunction StartedContainer({\r\n  user,\r\n  currentChannel,\r\n  setCurrentChannel,\r\n  isPrivateChannel,\r\n}) {\r\n  const [startedChannels, setStartedChannels] = useState([]);\r\n  const usersRef = firebase.db.ref(\"users\");\r\n  useEffect(() => {\r\n    if (user) {\r\n      usersRef.child(`${user.uid}/started`).on(\"child_added\", (snap) => {\r\n        const channelstarted = {\r\n          id: snap.key,\r\n          ...snap.val(),\r\n        };\r\n        setStartedChannels((prevState) => [...prevState, channelstarted]);\r\n      });\r\n\r\n      usersRef.child(`${user.uid}/started`).on(\"child_removed\", (snap) => {\r\n        const filterChannels = startedChannels.filter(\r\n          (channel) => channel.id !== snap.key\r\n        );\r\n\r\n        setStartedChannels([...filterChannels]);\r\n      });\r\n      return () => usersRef.child(`${user.uid}/started`).off();\r\n    }\r\n  }, [user, currentChannel]);\r\n\r\n  function changeChannel(channel) {\r\n    setCurrentChannel(channel);\r\n    isPrivateChannel(false);\r\n  }\r\n\r\n  return (\r\n    <Started>\r\n      <Started.Header countStarted={startedChannels.length} />\r\n      {startedChannels.length > 0 &&\r\n        startedChannels.map((channel) => {\r\n          return (\r\n            <Started.Channel\r\n              key={channel.id}\r\n              channelName={channel.name}\r\n              onClick={() => changeChannel(channel)}\r\n              active={channel.id === currentChannel?.id}\r\n            />\r\n          );\r\n        })}\r\n    </Started>\r\n  );\r\n}\r\n\r\nexport default connect(null, { setCurrentChannel, isPrivateChannel })(\r\n  StartedContainer\r\n);\r\n","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\redux\\colors\\colorsActions.js",[],"C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\containers\\UsersContainer.js",["257"],"import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Users from \"../components/users\";\r\nimport firebase from \"../firebase/firebase\";\r\nimport {\r\n  setCurrentChannel,\r\n  isPrivateChannel,\r\n} from \"../redux/channel/channelActions\";\r\n\r\nfunction UsersContainer({\r\n  user,\r\n  setCurrentChannel,\r\n  isPrivateChannel,\r\n  currentChannel,\r\n}) {\r\n  const usersRef = firebase.db.ref(\"users\");\r\n  const connectedRef = firebase.db.ref(\".info/connected\");\r\n  const presenceRef = firebase.db.ref(\"presence\");\r\n  const [users, setUsers] = useState([]);\r\n\r\n  useEffect(() => {\r\n    connectUser(users);\r\n    return () => {\r\n      usersRef.off();\r\n      connectedRef.off();\r\n      presenceRef.off();\r\n    };\r\n  }, [user]);\r\n\r\n  function connectUser() {\r\n    const loadUsers = [];\r\n    usersRef.on(\"child_added\", (snap) => {\r\n      if (user && user.uid !== snap.key) {\r\n        let snapUser = snap.val();\r\n        snapUser[\"uid\"] = snap.key;\r\n        snapUser[\"status\"] = \"offline\";\r\n        loadUsers.push(snapUser);\r\n        presenceRef.on(\"child_added\", (snap) => {\r\n          if (user?.uid !== snap.key) {\r\n            const updateUsers = loadUsers.reduce((acc, user) => {\r\n              if (snap.key === user.uid) {\r\n                user[\"status\"] = \"online\";\r\n              }\r\n              return acc.concat(user);\r\n            }, []);\r\n            setUsers([...updateUsers]);\r\n          }\r\n        });\r\n        presenceRef.on(\"child_removed\", (snap) => {\r\n          if (user?.uid !== snap.key) {\r\n            const updateUsers = loadUsers.reduce((acc, user) => {\r\n              if (snap.key === user.uid) {\r\n                user[\"status\"] = \"offline\";\r\n              }\r\n              return acc.concat(user);\r\n            }, []);\r\n            setUsers([...updateUsers]);\r\n          }\r\n        });\r\n        if (users.length === 0) {\r\n          setUsers([...loadUsers]);\r\n        }\r\n      }\r\n    });\r\n    connectedRef.on(\"value\", (snap) => {\r\n      if (user && snap.val() === true) {\r\n        const ref = presenceRef.child(user.uid);\r\n        ref.set(true);\r\n        ref.onDisconnect().remove((err) => console.log(err));\r\n      }\r\n    });\r\n  }\r\n\r\n  function changeUser(user) {\r\n    const channelId = getChannelId(user.uid);\r\n    const newData = {\r\n      id: channelId,\r\n      name: user.name,\r\n    };\r\n    setCurrentChannel(newData);\r\n    isPrivateChannel(true);\r\n  }\r\n\r\n  function getChannelId(userId) {\r\n    return userId < user.uid\r\n      ? `${userId}/${user.uid}`\r\n      : `${user.uid}/${userId}`;\r\n  }\r\n\r\n  function userActive(userId) {\r\n    return currentChannel?.id.includes(userId);\r\n  }\r\n  return (\r\n    <Users>\r\n      <Users.Header countUsers={users.length} />\r\n      {users &&\r\n        users.map((user) => (\r\n          <Users.User\r\n            key={user.uid}\r\n            onClick={() => changeUser(user)}\r\n            userName={user.name}\r\n            status={user.status}\r\n            active={userActive(user.uid)}\r\n          />\r\n        ))}\r\n    </Users>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = ({ channel }) => ({\r\n  currentChannel: channel.currentChannel,\r\n});\r\nexport default connect(mapStateToProps, {\r\n  setCurrentChannel,\r\n  isPrivateChannel,\r\n})(UsersContainer);\r\n","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\redux\\colors\\colorsTypes.js",[],"C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\redux\\channel\\channelType.js",[],"C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\components\\sendMsg\\index.js",["258"],"import React from 'react'\r\nimport {Picker} from 'emoji-mart'\r\nimport {Container,Input,Button} from './styles/sendMsg'\r\nexport default function SendMsg({children}) {\r\n    return (\r\n        <Container>\r\n            {children}\r\n        </Container>\r\n    )\r\n}\r\n\r\nSendMsg.Input=({...restProps})=>(\r\n    <Input {...restProps}/>\r\n)\r\n\r\nSendMsg.Button=({color,children,...restProps})=>(\r\n    <Button color={color} {...restProps}>{children}</Button>\r\n)\r\n","C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\components\\headerMsg\\index.js",[],"C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\components\\messages\\index.js",[],"C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\components\\progress\\index.js",[],"C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\components\\sideColor\\index.js",[],"C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\components\\sidePanel\\index.js",[],"C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\components\\metaPanel\\index.js",[],"C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\components\\form\\styles\\form.js",[],"C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\components\\gridContainer\\styles\\gridContainer.js",[],"C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\components\\channels\\index.js",[],"C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\components\\dropDownUser\\index.js",[],"C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\components\\started\\index.js",[],"C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\components\\users\\index.js",[],"C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\components\\sendMsg\\styles\\sendMsg.js",[],"C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\components\\headerMsg\\styles\\headerMsg.js",[],"C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\components\\progress\\styles\\progress.js",[],"C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\components\\messages\\styles\\messages.js",[],"C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\components\\sideColor\\styles\\sideColor.js",[],"C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\components\\sidePanel\\styles\\sidePanel.js",[],"C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\components\\metaPanel\\styles\\metaPanel.js",[],"C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\components\\dropDownUser\\styles\\dropDownUser.js",[],"C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\components\\channels\\styles\\channels.js",[],"C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\components\\started\\styles\\started.js",[],"C:\\Users\\mohmed\\Desktop\\course-react\\Slack-App\\src\\components\\users\\styles\\users.js",[],["259","260"],{"ruleId":"261","replacedBy":"262"},{"ruleId":"263","replacedBy":"264"},{"ruleId":"265","severity":1,"message":"266","line":25,"column":4,"nodeType":"267","endLine":25,"endColumn":6,"suggestions":"268"},{"ruleId":"265","severity":1,"message":"269","line":72,"column":8,"nodeType":"267","endLine":72,"endColumn":29,"suggestions":"270"},{"ruleId":"265","severity":1,"message":"271","line":77,"column":8,"nodeType":"267","endLine":77,"endColumn":18,"suggestions":"272"},{"ruleId":"265","severity":1,"message":"273","line":108,"column":8,"nodeType":"267","endLine":108,"endColumn":16,"suggestions":"274"},{"ruleId":"265","severity":1,"message":"275","line":201,"column":8,"nodeType":"267","endLine":201,"endColumn":24,"suggestions":"276"},{"ruleId":"265","severity":1,"message":"277","line":208,"column":8,"nodeType":"267","endLine":208,"endColumn":18,"suggestions":"278"},{"ruleId":"265","severity":1,"message":"279","line":251,"column":8,"nodeType":"267","endLine":251,"endColumn":29,"suggestions":"280"},{"ruleId":"265","severity":1,"message":"281","line":24,"column":8,"nodeType":"267","endLine":24,"endColumn":14,"suggestions":"282"},{"ruleId":"283","severity":1,"message":"284","line":12,"column":12,"nodeType":"285","messageId":"286","endLine":12,"endColumn":24},{"ruleId":"283","severity":1,"message":"287","line":16,"column":12,"nodeType":"285","messageId":"286","endLine":16,"endColumn":24},{"ruleId":"265","severity":1,"message":"288","line":45,"column":6,"nodeType":"267","endLine":45,"endColumn":8,"suggestions":"289"},{"ruleId":"265","severity":1,"message":"290","line":73,"column":8,"nodeType":"267","endLine":73,"endColumn":24,"suggestions":"291"},{"ruleId":"292","severity":1,"message":"293","line":100,"column":36,"nodeType":"294","endLine":100,"endColumn":112},{"ruleId":"265","severity":1,"message":"295","line":37,"column":6,"nodeType":"267","endLine":37,"endColumn":28,"suggestions":"296"},{"ruleId":"265","severity":1,"message":"297","line":28,"column":6,"nodeType":"267","endLine":28,"endColumn":12,"suggestions":"298"},{"ruleId":"283","severity":1,"message":"299","line":2,"column":9,"nodeType":"285","messageId":"286","endLine":2,"endColumn":15},{"ruleId":"261","replacedBy":"300"},{"ruleId":"263","replacedBy":"301"},"no-native-reassign",["302"],"no-negated-in-lhs",["303"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history' and 'setCurrentUser'. Either include them or remove the dependency array. If 'setCurrentUser' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["304"],"React Hook useEffect has missing dependencies: 'refMessages' and 'usersRef'. Either include them or remove the dependency array.",["305"],"React Hook useEffect has a missing dependency: 'countUserMessage'. Either include it or remove the dependency array.",["306"],"React Hook useEffect has a missing dependency: 'messages'. Either include it or remove the dependency array.",["307"],"React Hook useEffect has missing dependencies: 'currentChannel.description', 'currentChannel.id', 'currentChannel.name', and 'usersRef'. Either include them or remove the dependency array.",["308"],"React Hook useEffect has a missing dependency: 'msgEnd'. Either include it or remove the dependency array.",["309"],"React Hook useEffect has missing dependencies: 'connectedRef', 'typingRef', and 'typingUsers'. Either include them or remove the dependency array. You can also do a functional update 'setTypingUsers(t => ...)' if you only need 'typingUsers' in the 'setTypingUsers' call.",["310"],"React Hook useEffect has a missing dependency: 'usersRef'. Either include it or remove the dependency array.",["311"],"no-unused-vars","'clickHandler' is defined but never used.","Identifier","unusedVar","'displayPosts' is defined but never used.","React Hook useEffect has missing dependencies: 'addNotifications', 'channelRef', 'firstChannel', 'messageRef', and 'setCurrentChannel'. Either include them or remove the dependency array. If 'setCurrentChannel' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["312"],"React Hook useEffect has missing dependencies: 'user.uid', 'userRef', and 'usersRef'. Either include them or remove the dependency array.",["313"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has missing dependencies: 'startedChannels' and 'usersRef'. Either include them or remove the dependency array.",["314"],"React Hook useEffect has missing dependencies: 'connectUser', 'connectedRef', 'presenceRef', 'users', and 'usersRef'. Either include them or remove the dependency array.",["315"],"'Picker' is defined but never used.",["302"],["303"],"no-global-assign","no-unsafe-negation",{"desc":"316","fix":"317"},{"desc":"318","fix":"319"},{"desc":"320","fix":"321"},{"desc":"322","fix":"323"},{"desc":"324","fix":"325"},{"desc":"326","fix":"327"},{"desc":"328","fix":"329"},{"desc":"330","fix":"331"},{"desc":"332","fix":"333"},{"desc":"334","fix":"335"},{"desc":"336","fix":"337"},{"desc":"338","fix":"339"},"Update the dependencies array to be: [history, setCurrentUser]",{"range":"340","text":"341"},"Update the dependencies array to be: [user, currentChannel, refMessages, usersRef]",{"range":"342","text":"343"},"Update the dependencies array to be: [countUserMessage, messages]",{"range":"344","text":"345"},"Update the dependencies array to be: [messages, search]",{"range":"346","text":"347"},"Update the dependencies array to be: [currentChannel.description, currentChannel.id, currentChannel.name, isStarted, user, usersRef]",{"range":"348","text":"349"},"Update the dependencies array to be: [messages, msgEnd]",{"range":"350","text":"351"},"Update the dependencies array to be: [user, currentChannel, typingRef, connectedRef, typingUsers]",{"range":"352","text":"353"},"Update the dependencies array to be: [user, usersRef]",{"range":"354","text":"355"},"Update the dependencies array to be: [addNotifications, channelRef, firstChannel, messageRef, setCurrentChannel]",{"range":"356","text":"357"},"Update the dependencies array to be: [imageAvatarUrl, user.uid, userRef, usersRef]",{"range":"358","text":"359"},"Update the dependencies array to be: [user, currentChannel, usersRef, startedChannels]",{"range":"360","text":"361"},"Update the dependencies array to be: [connectUser, connectedRef, presenceRef, user, users, usersRef]",{"range":"362","text":"363"},[745,747],"[history, setCurrentUser]",[3358,3379],"[user, currentChannel, refMessages, usersRef]",[3511,3521],"[countUserMessage, messages]",[4594,4602],"[messages, search]",[8578,8594],"[currentChannel.description, currentChannel.id, currentChannel.name, isStarted, user, usersRef]",[8762,8772],"[messages, msgEnd]",[10472,10493],"[user, currentChannel, typingRef, connectedRef, typingUsers]",[860,866],"[user, usersRef]",[1329,1331],"[addNotifications, channelRef, firstChannel, messageRef, setCurrentChannel]",[2768,2784],"[imageAvatarUrl, user.uid, userRef, usersRef]",[1130,1152],"[user, currentChannel, usersRef, startedChannels]",[741,747],"[connectUser, connectedRef, presenceRef, user, users, usersRef]"]